(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{367:function(t,a,s){"use strict";s.r(a);var r=s(44),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"bff开发规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bff开发规范"}},[t._v("#")]),t._v(" BFF开发规范")]),t._v(" "),s("h3",{attrs:{id:"目标"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#目标"}},[t._v("#")]),t._v(" 目标")]),t._v(" "),s("p",[t._v("保证接口的设计符合业务需求和设计要求，使得前后端开发人员能够更好地协作和沟通。")]),t._v(" "),s("h3",{attrs:{id:"公共参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#公共参数"}},[t._v("#")]),t._v(" 公共参数")]),t._v(" "),s("p",[t._v("公共参数是指基于前端通用属性的公共参数，每次API请求时均需要带上公参，便于BFF接口逻辑处理。常见的公共参数包括App版本号、前端一级渠道、前端二级渠道、设备号等。")]),t._v(" "),s("h3",{attrs:{id:"路径命名规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#路径命名规范"}},[t._v("#")]),t._v(" 路径命名规范")]),t._v(" "),s("p",[t._v("BFF的路径格式建议采用类似于https://domain/api/service/method的形式，其中method是HTTP方法，可以采用GET或POST等方式调用。")]),t._v(" "),s("h3",{attrs:{id:"字段命名规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字段命名规范"}},[t._v("#")]),t._v(" 字段命名规范")]),t._v(" "),s("p",[t._v("驼峰命名法，常量字段全部大写，单词之间用下划线隔开，言简意赅，见名知意，尽量不使用缩写。")]),t._v(" "),s("h3",{attrs:{id:"请求方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#请求方式"}},[t._v("#")]),t._v(" 请求方式")]),t._v(" "),s("p",[t._v("BFF的请求方式建议采用POST方式，因为POST请求可以带上请求体，便于数据的传输和处理。")]),t._v(" "),s("h3",{attrs:{id:"数据传输"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据传输"}},[t._v("#")]),t._v(" 数据传输")]),t._v(" "),s("p",[t._v("BFF的数据传输建议采用JSON格式，因为JSON格式可以方便地将数据进行序列化和反序列化。")]),t._v(" "),s("h3",{attrs:{id:"安全性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安全性"}},[t._v("#")]),t._v(" 安全性")]),t._v(" "),s("p",[t._v("BFF的安全性设计应该遵循相应的安全性规范，以保证应用程序的安全性。常见的安全性规范包括采用HTTPS、使用API Keys等。")]),t._v(" "),s("h3",{attrs:{id:"性能优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#性能优化"}},[t._v("#")]),t._v(" 性能优化")]),t._v(" "),s("p",[t._v("BFF的性能优化设计应该遵循相应的性能优化规范，以提高应用程序的响应速度和性能。常见的性能优化规范包括采用Node.js内置的性能优化工具、使用Express中间件等。")])])}),[],!1,null,null,null);a.default=e.exports}}]);
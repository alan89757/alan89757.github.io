(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{584:function(t,a,_){t.exports=_.p+"assets/img/159.eb624efe.png"},640:function(t,a,_){"use strict";_.r(a);var r=_(19),s=Object(r.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("p",[t._v("本章节是 Vue.js 源码分析系列的第三章节，主要介绍基础数据代理。")]),t._v(" "),r("h2",{attrs:{id:"_1-在浏览器中输入url"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-在浏览器中输入url"}},[t._v("#")]),t._v(" 1. 在浏览器中输入URL")]),t._v(" "),r("h4",{attrs:{id:"_1-1-查找域名缓存"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-查找域名缓存"}},[t._v("#")]),t._v(" 1.1 查找域名缓存")]),t._v(" "),r("p",[t._v("缓存顺序：「浏览器缓存->系统缓存->路由器缓存->ISP缓存」， 如果没有缓存，继续向ISP搜索。")]),t._v(" "),r("h4",{attrs:{id:"_1-2-dns域名解析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-dns域名解析"}},[t._v("#")]),t._v(" 1.2 DNS域名解析")]),t._v(" "),r("p",[t._v("浏览器向DNS服务器发起请求，解析该URL中的域名对应的IP地址。DNS服务器是基于UDP的，因此会用到UDP协议。")]),t._v(" "),r("h4",{attrs:{id:"_1-3-建立tcp连接"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-建立tcp连接"}},[t._v("#")]),t._v(" 1.3 建立TCP连接")]),t._v(" "),r("p",[t._v("解析出IP地址后，根据IP地址和默认80端口，和服务器建立TCP连接")]),t._v(" "),r("h4",{attrs:{id:"_1-4-发起http请求"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-发起http请求"}},[t._v("#")]),t._v(" 1.4 发起HTTP请求")]),t._v(" "),r("p",[t._v("浏览器发起读取文件的HTTP请求，该请求报文作为TCP三次握手的第三次数据发送给服务器")]),t._v(" "),r("h4",{attrs:{id:"_1-5-服务器响应请求"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-服务器响应请求"}},[t._v("#")]),t._v(" 1.5 服务器响应请求")]),t._v(" "),r("p",[t._v("服务器对浏览器请求做出响应，并把对应的html文件发送给浏览器")]),t._v(" "),r("h4",{attrs:{id:"_1-6-关闭tcp连接"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-关闭tcp连接"}},[t._v("#")]),t._v(" 1.6 关闭TCP连接")]),t._v(" "),r("p",[t._v("通过四次挥手释放TCP连接")]),t._v(" "),r("h2",{attrs:{id:"_2-浏览器渲染"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-浏览器渲染"}},[t._v("#")]),t._v(" 2. 浏览器渲染")]),t._v(" "),r("p",[t._v("客户端（浏览器）解析HTML内容并渲染出来，浏览器接收到数据包后的解析流程为：")]),t._v(" "),r("h4",{attrs:{id:"_2-1-构建dom树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-构建dom树"}},[t._v("#")]),t._v(" 2.1 构建DOM树")]),t._v(" "),r("p",[t._v("词法分析然后解析成DOM树（dom tree），是由dom元素及属性节点组成，树的根是document对象")]),t._v(" "),r("h4",{attrs:{id:"_2-2-构建css规则树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-构建css规则树"}},[t._v("#")]),t._v(" 2.2 构建CSS规则树")]),t._v(" "),r("p",[t._v("生成CSS规则树（CSS Rule Tree）")]),t._v(" "),r("h4",{attrs:{id:"_2-3-构建render树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-构建render树"}},[t._v("#")]),t._v(" 2.3 构建render树")]),t._v(" "),r("p",[t._v("Web浏览器将DOM和CSSOM结合，并构建出渲染树（render tree）")]),t._v(" "),r("h4",{attrs:{id:"_2-4-布局-layout"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-布局-layout"}},[t._v("#")]),t._v(" 2.4 布局（Layout）")]),t._v(" "),r("p",[t._v("计算出每个节点在屏幕中的位置")]),t._v(" "),r("h4",{attrs:{id:"_2-5-绘制-painting"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-绘制-painting"}},[t._v("#")]),t._v(" 2.5 绘制（Painting）")]),t._v(" "),r("p",[t._v("即遍历render树，并使用UI后端层绘制每个节点\n"),r("img",{attrs:{src:_(584)}})]),t._v(" "),r("h2",{attrs:{id:"_3-js引擎解析过程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-js引擎解析过程"}},[t._v("#")]),t._v(" 3. JS引擎解析过程")]),t._v(" "),r("p",[t._v("调用JS引擎执行JS代码（JS的解释阶段，预处理阶段，执行阶段生成执行上下文，VO，作用域链、回收机制等等）")]),t._v(" "),r("h4",{attrs:{id:"_3-1-创建window对象"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-创建window对象"}},[t._v("#")]),t._v(" 3.1 创建window对象")]),t._v(" "),r("p",[t._v("window对象也叫全局执行环境，当页面产生时就被创建，所有的全局变量和函数都属于window的属性和方法，而DOM Tree也会映射在window的doucment对象上。当关闭网页或者关闭浏览器时，全局执行环境会被销毁。")]),t._v(" "),r("h4",{attrs:{id:"_3-2-加载文件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-加载文件"}},[t._v("#")]),t._v(" 3.2 加载文件")]),t._v(" "),r("p",[t._v("完成js引擎分析它的语法与词法是否合法，如果合法进入预编译")]),t._v(" "),r("h4",{attrs:{id:"_3-3-预编译"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-预编译"}},[t._v("#")]),t._v(" 3.3 预编译")]),t._v(" "),r("p",[t._v("在预编译的过程中，浏览器会寻找全局变量声明，把它作为window的属性加入到window对象中，并给变量赋值为'undefined'；寻找全局函数声明，把它作为window的方法加入到window对象中，并将函数体赋值给他（匿名函数是不参与预编译的，因为它是变量）。而变量提升作为不合理的地方在ES6中已经解决了，函数提升还存在。")]),t._v(" "),r("h4",{attrs:{id:"_3-4-解释执行"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-解释执行"}},[t._v("#")]),t._v(" 3.4 解释执行")]),t._v(" "),r("p",[t._v("执行到变量就赋值，如果变量没有被定义，也就没有被预编译直接赋值，在ES5非严格模式下这个变量会成为window的一个属性，也就是成为全局变量。string、int这样的值就是直接把值放在变量的存储空间里，object对象就是把指针指向变量的存储空间。函数执行，就将函数的环境推入一个环境的栈中，执行完成后再弹出，控制权交还给之前的环境。JS作用域其实就是这样的执行流机制实现的。")])])}),[],!1,null,null,null);a.default=s.exports}}]);